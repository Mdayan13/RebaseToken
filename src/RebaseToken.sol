// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {AccessControl} from "@openzeppelin/contracts/access/AccessControl.sol";
import {console} from "forge-std/console.sol";

/*
* @title RebaseToken
* @author Ciara Nightingale
* @notice This is a cross-chain rebase token that incentivises users to deposit into a vault and gain interest in rewards.
* @notice The interest rate in the smart contract can only decrease 
* @notice Each will user will have their own interest rate that is the global interest rate at the time of depositing.
*/
contract RebaseToken is ERC20, Ownable, AccessControl {
    error RebaseToken_canOnlyDecreaseTheRate(uint256 oldinterestRate, uint256 newInterestRate);

    mapping(address => uint256) private s_usersInterestRate;
    mapping(address => uint256) private s_userLastTimeUpdatedTimeStamp;

    bytes32 private constant MINT_BURN_AND_ROLE = keccak256("MINT_BURN_AND_ROLE");
    uint256 private constant PRECISION_FACTOR = 1e18;
    uint256 private s_interestRate = (5 * PRECISION_FACTOR) / 1e8;

    event InterestChanged(uint256 newInteresetRate);

    constructor() ERC20("RebaseToken", "RBT") Ownable(msg.sender) {}

    function grantMintAndBurnRole(address _account) external onlyOwner {
        console.log("level one");
        _grantRole(MINT_BURN_AND_ROLE, _account);
    }

    /**
     * @notice Set the interest rate in the contract
     * @param _newInterestRate The new interest rate to set
     * @dev The interest rate can only decrease
     */
    function setInterestRate(uint256 _newInterestRate) external onlyOwner {
        if (_newInterestRate > s_interestRate) {
            revert RebaseToken_canOnlyDecreaseTheRate(s_interestRate, _newInterestRate);
        }
        s_interestRate = _newInterestRate;
        emit InterestChanged(_newInterestRate);
    }

    /**
     * @notice Mints new tokens for a given address. Called when a user either deposits or bridges tokens to this chain.
     * @param _to The address to mint the tokens to.
     * @param amount The number of tokens to mint.
     * @dev this function increases the total supply.
     */
    function mint(address _to, uint256 amount, uint256 _interestRate) external onlyRole(MINT_BURN_AND_ROLE) {
        _mintAccruedInterest(_to);
        s_usersInterestRate[_to] = _interestRate;
        _mint(_to, amount);
    }

    /*
    * @notice Burns tokens from the sender.
    * @param _from The address to burn the tokens from.
    * @param _value The number of tokens to be burned
    * @dev this function decreases the total supply.
    */
    function burn(address from, uint256 amount) external onlyRole(MINT_BURN_AND_ROLE) {
        _mintAccruedInterest(from);
        console.log("yeah burn");
        _burn(from, amount);
    }

    /**
     * @dev returns the global interest rate of the token for future depositors
     * @return s_interestRate
     *
     */
    function getuserInterestRate(address user) public view returns (uint256) {
        return s_usersInterestRate[user];
    }

    function getGlobslInterstRate() external view returns (uint256) {
        return s_interestRate;
    }

    /**
     * @notice returns the Principal Balance
     * @param f_user user adddress
     */
    function PrincipalBalanceO(address f_user) external view returns (uint256) {
        return super.balanceOf(f_user);
    }

    /**
     * @dev calculates the balance of the user, which is the
     * principal balance + interest generated by the principal balance
     * @param _user the user for which the balance is being calculated
     * @return the total balance of the user
     *
     */
    function balanceOf(address _user) public view override returns (uint256) {
        uint256 currentPrincipal = super.balanceOf(_user);
        if (currentPrincipal == 0) {
            return 0;
        }
        return (currentPrincipal * _calculateUsersAccumulatedInterestSinceLastUpdate(_user)) / PRECISION_FACTOR;
    }

    /**
     * @dev transfers tokens from the sender to the recipient. This function also mints any accrued interest since the last time the user's balance was updated.
     * @param reciepent the address of the recipient
     * @param amount the amount of tokens to transfer
     * @return true if the transfer was successful
     */
    function transfer(address reciepent, uint256 amount) public override returns (bool) {
        _mintAccruedInterest(reciepent);
        _mintAccruedInterest(msg.sender);
        if (amount == type(uint256).max) {
            amount == balanceOf(reciepent);
        }
        if (balanceOf(reciepent) == 0) {
            s_usersInterestRate[reciepent] = s_usersInterestRate[msg.sender];
        }
        return super.transfer(reciepent, amount);
    }

    /**
     * @dev trnsfers tokens from the sender to the recipient. This function also mints any accrued interest since the last time the user's balance was updated.
     * @param from the address of the sender
     * @param reciepent the address of the recipient
     * @param amount the amount of tokens to transfer
     * @return true if the transfer was successful
     */
    function transferFrom(address from, address reciepent, uint256 amount) public override returns (bool) {
        _mintAccruedInterest(reciepent);
        _mintAccruedInterest(msg.sender);
        if (amount == type(uint256).max) {
            amount == balanceOf(reciepent);
        }
        if (balanceOf(reciepent) == 0) {
            s_usersInterestRate[reciepent] = s_usersInterestRate[msg.sender];
        }
        return super.transferFrom(from, reciepent, amount);
    }

    /**
     * @dev accumulates the accrued interest of the user to the principal balance. This function mints the users accrued interest since they last transferred or bridged tokens.
     * @param _user the address of the user for which the interest is being minted
     *
     */
    function _mintAccruedInterest(address _user) internal {
        uint256 previousBAlance = super.balanceOf(_user);

        uint256 CurrentBalance = balanceOf(_user);

        uint256 IncreasedBalance = CurrentBalance - previousBAlance;

        _mint(_user, IncreasedBalance);
        s_userLastTimeUpdatedTimeStamp[_user] = block.timestamp;
    }

    /**
     * @dev returns the interest accrued since the last update of the user's balance - aka since the last time the interest accrued was minted to the user.
     * @return linearInterst the interest accrued since the last update
     * @param _user address of usre
     */
    function _calculateUsersAccumulatedInterestSinceLastUpdate(address _user)
        internal
        view
        returns (uint256 linearInterst)
    {
        uint256 timeLapseDifferrence = block.timestamp - s_userLastTimeUpdatedTimeStamp[_user];
        linearInterst = PRECISION_FACTOR + (timeLapseDifferrence * s_usersInterestRate[_user]); // 1e18 + ( time * rate)
    }
}

// timeLapseDifferrence = 86,400 seconds
// s_usersInterestRate = 50,000,000,000 (per second)

// Step 1: Calculate interest earned
// timeLapseDifferrence * s_usersInterestRate = 86,400 Ã— 50,000,000,000 = 4,320,000,000,000,000

// Step 2: Add to base (which represents 1.0)
// linearInterst = 1,000,000,000,000,000,000 + 4,320,000,000,000,000
// linearInterst = 1,004,320,000,000,000,000
